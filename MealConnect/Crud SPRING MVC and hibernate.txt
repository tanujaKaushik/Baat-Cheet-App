Create CRUD (Create/Save, Read/Fetch, Edit/Update, Delete) using Spring 
MVC and Hibernation. 

To create a CRUD (Create/Save, Read/Fetch, Edit/Update, Delete) application using Spring MVC and Hibernate, we'll implement operations for managing student information. This example will cover setting up entity classes, repository interfaces, service layer, and controller to handle CRUD operations.

Step-by-Step Implementation
1. Define Entity Class
Create a Student entity class with appropriate annotations for Hibernate mapping.

Student Entity (Student.java)
java
Copy code
import javax.persistence.*;

@Entity
@Table(name = "students")
public class Student {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "full_name", nullable = false)
    private String fullName;

    @Column(name = "address")
    private String address;

    @Column(name = "gender")
    private String gender;

    @ManyToOne
    @JoinColumn(name = "course_id")
    private Course course;

    @Column(name = "admission_date")
    private String admissionDate;

    @Column(name = "scholarship")
    private boolean scholarship;

    @Column(name = "hostel_accommodation")
    private boolean hostelAccommodation;

    // Getters and setters (generated or written manually)
}
Course Entity (Course.java)
java
Copy code
import javax.persistence.*;

@Entity
@Table(name = "courses")
public class Course {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "name", nullable = false)
    private String name;

    // Getters and setters (generated or written manually)
}
2. Create Repository Interface
Define a Spring Data JPA repository interface (StudentRepository) to perform CRUD operations on the Student entity.

Student Repository (StudentRepository.java)
java
Copy code
import org.springframework.data.jpa.repository.JpaRepository;

public interface StudentRepository extends JpaRepository<Student, Long> {
    // Define custom queries if needed
}
3. Create Service Layer
Create a service class (StudentService) to encapsulate business logic involving the repository.

Student Service (StudentService.java)
java
Copy code
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
@Transactional
public class StudentService {

    private final StudentRepository studentRepository;

    @Autowired
    public StudentService(StudentRepository studentRepository) {
        this.studentRepository = studentRepository;
    }

    public List<Student> getAllStudents() {
        return studentRepository.findAll();
    }

    public Optional<Student> getStudentById(Long id) {
        return studentRepository.findById(id);
    }

    public Student saveOrUpdateStudent(Student student) {
        return studentRepository.save(student);
    }

    public void deleteStudent(Long id) {
        studentRepository.deleteById(id);
    }
}
4. Create Controller
Create a Spring MVC controller (StudentController) to handle HTTP requests and interact with the service layer.

Student Controller (StudentController.java)
java
Copy code
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@Controller
@RequestMapping("/students")
public class StudentController {

    private final StudentService studentService;

    @Autowired
    public StudentController(StudentService studentService) {
        this.studentService = studentService;
    }

    @GetMapping
    public String getAllStudents(Model model) {
        List<Student> students = studentService.getAllStudents();
        model.addAttribute("students", students);
        return "student-list"; // Thymeleaf template name (student-list.html)
    }

    @GetMapping("/{id}")
    public String getStudentById(@PathVariable Long id, Model model) {
        Optional<Student> student = studentService.getStudentById(id);
        student.ifPresent(s -> model.addAttribute("student", s));
        return "student-detail"; // Thymeleaf template name (student-detail.html)
    }

    @GetMapping("/new")
    public String showStudentForm(Model model) {
        model.addAttribute("student", new Student());
        return "student-form"; // Thymeleaf template name (student-form.html)
    }

    @PostMapping
    public String saveOrUpdateStudent(@ModelAttribute("student") Student student) {
        studentService.saveOrUpdateStudent(student);
        return "redirect:/students";
    }

    @GetMapping("/{id}/edit")
    public String editStudentForm(@PathVariable Long id, Model model) {
        Optional<Student> student = studentService.getStudentById(id);
        student.ifPresent(s -> model.addAttribute("student", s));
        return "student-form"; // Thymeleaf template name (student-form.html)
    }

    @GetMapping("/{id}/delete")
    public String deleteStudent(@PathVariable Long id) {
        studentService.deleteStudent(id);
        return "redirect:/students";
    }
}
5. Create Thymeleaf Templates
Create Thymeleaf templates (student-list.html, student-detail.html, student-form.html) under src/main/resources/templates to display student information and manage CRUD operations.

student-list.html:

html
Copy code
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Student List</title>
</head>
<body>
    <h1>Student List</h1>
    <table border="1">
        <thead>
            <tr>
                <th>ID</th>
                <th>Full Name</th>
                <th>Address</th>
                <th>Gender</th>
                <th>Course</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <tr th:each="student : ${students}">
                <td th:text="${student.id}"></td>
                <td th:text="${student.fullName}"></td>
                <td th:text="${student.address}"></td>
                <td th:text="${student.gender}"></td>
                <td th:text="${student.course.name}"></td>
                <td>
                    <a th:href="@{/students/{id}(id=${student.id})}">View</a> |
                    <a th:href="@{/students/{id}/edit(id=${student.id})}">Edit</a> |
                    <a th:href="@{/students/{id}/delete(id=${student.id})}">Delete</a>
                </td>
            </tr>
        </tbody>
    </table>
    <a href="/students/new">Add New Student</a>
</body>
</html>
student-detail.html:

html
Copy code
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Student Detail</title>
</head>
<body>
    <h1>Student Detail</h1>
    <p>ID: <span th:text="${student.id}"></span></p>
    <p>Full Name: <span th:text="${student.fullName}"></span></p>
    <p>Address: <span th:text="${student.address}"></span></p>
    <p>Gender: <span th:text="${student.gender}"></span></p>
    <p>Course: <span th:text="${student.course.name}"></span></p>
    <p>Admission Date: <span th:text="${student.admissionDate}"></span></p>
    <p>Scholarship: <span th:text="${student.scholarship ? 'Yes' : 'No'}"></span></p>
    <p>Hostel Accommodation: <span th:text="${student.hostelAccommodation ? 'Yes' : 'No'}"></span></p>
    <a href="/students">Back to Student List</a>
</body>
</html>
student-form.html:

html
Copy code
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Student Form</title>
</head>
<body>
    <h1>Student Form</h1>
    <form action="#" th:action="@{/students}" th:object="${student}" method="post">
        <input type="hidden" th:field="*{id}"/>

        <label for="fullName">Full Name:</label>
        <input type="text" id="fullName" name="fullName" th:field="*{fullName}"/><br/><br/>

        <label for="address">Address:</label>
        <textarea id="address" name="address" th:field="*{address}"></textarea><br/><br/>

        <label for="gender">Gender:</label><br/>
        <input type="radio" id="male" name="gender" th:value="Male" th:field="*{gender}"/><label for="male">Male</label>
        <input type="radio" id="female" name="gender" th:value="Female" th:field="*{gender}"/><label for="female">Female</label><br/><br/>

        <label for="course">Course:</label>
        <select id="course" name="course.id" th:field="*{course.id}">
            <option th:each="course : ${courses}" th:value="${course.id}" th:text="${course.name}"></option>
        </select><br/><br/>

        <label for="admissionDate">Admission Date:</label>
        <input type="text" id="admissionDate" name="admissionDate" th:field="*{admissionDate}"/><br/><br/>

        <label for="scholarship">Scholarship:</label>
        <input type="checkbox" id="scholarship" name="scholarship" th:field="*{scholarship}"/><br/><br/>

        <label for="hostelAccommodation">Hostel Accommodation:</label>
        <input type="checkbox" id="hostelAccommodation" name="hostelAccommodation" th:field="*{hostelAccommodation}"/><br/><br/>

        <input type="submit" value="Save"/>
    </form>
</body>
</html>
6. Run the Application
Run your Spring Boot application (Application.java). Navigate to http://localhost:8080/students to access the student list. You can perform CRUD operations (view, add, edit, delete) on student records using the provided Thymeleaf templates.

Summary
This implementation demonstrates how to create a CRUD application using Spring MVC and Hibernate. By defining entity classes, repository interfaces, service layer, and controllers, you can manage student information effectively. Thymeleaf templates provide a seamless integration for rendering views and handling form submissions. Customize entity mappings, repository methods, and HTML templates based on your application's requirements. This approach leverages Spring's powerful features to simplify database interactions and streamline web application development. Adjust configurations, add validations, and expand functionality as per your specific use case and business needs









or 












Here's a breakdown of implementing CRUD operations using Spring MVC and Hibernate:

1. Define Entities:

Create Java classes representing your data model (entities) with JPA annotations. Here's an example Student entity:

Java
@Entity
@Table(name = "students")
public class Student {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Column(nullable = false)
  private String name;

  @Column(nullable = false, unique = true)
  private String email;

  private String address;
  private String phone;
  private String program;

  @Column(name = "dob")
  private LocalDate dateOfBirth;

  private boolean isFullTime;

  // Getters, setters, constructors (omitted for brevity)
}
Use code with caution.

2. Configure Hibernate and JPA:

Add Hibernate and JPA dependencies to your project.
Configure a DataSource bean to connect to your database.
Create a JpaTransactionManager bean to manage transactions.
3. Spring Data JPA Repository (Optional):

Consider using Spring Data JPA repositories for simplified CRUD operations.
Define an interface extending JpaRepository<Student, Long> for the Student entity. This provides methods like findById, save, deleteById, etc.
4. Spring MVC Controller:

Create a Spring MVC controller class to handle student data requests.
5. Create Operation (Optional - Form Submission):

If creating students involves form submission, define a form view and a controller method to handle the POST request.
Use the submitted data to create a new Student object and save it using the repository or EntityManager.
Java
@Controller
public class StudentController {

  @Autowired
  private StudentRepository studentRepository; // Inject StudentRepository (if using Spring Data JPA)

  @GetMapping("/addStudent")
  public String showAddStudentForm(Model model) {
    model.addAttribute("student", new Student()); // Create empty student object for form binding
    return "student_form"; // View to display the form
  }

  @PostMapping("/saveStudent")
  public String saveStudent(@ModelAttribute Student student) {
    studentRepository.save(student); // Save student using repository
    return "redirect:/studentList"; // Redirect to student list view
  }
}
Use code with caution.

6. Read Operation (Fetching Students):

Create a controller method to fetch student information.
You can use repository methods like findAll or create custom queries using EntityManager for specific filtering.
Java
@GetMapping("/studentList")
public String showStudentList(Model model) {
  List<Student> students = studentRepository.findAll(); // Fetch all students using repository
  model.addAttribute("students", students);
  return "student_list"; // View to display the list
}
Use code with caution.

7. Update Operation (Optional - Form Submission):

Create a controller method to handle the edit form submission (PUT or PATCH request).
Use the submitted data to update the existing Student object and save it using the repository.
Java
@GetMapping("/editStudent/{id}")
public String showEditStudentForm(@PathVariable Long id, Model model) {
  Student student = studentRepository.findById(id).get(); // Fetch student by ID
  model.addAttribute("student", student);
  return "student_form"; // Edit form view pre-populated with student data
}

@PostMapping("/updateStudent")
public String updateStudent(@ModelAttribute Student student) {
  studentRepository.save(student); // Update student using repository
  return "redirect:/studentList";
}
Use code with caution.

8. Delete Operation:

Create a controller method to handle the delete request.
Use the repository method deleteById or delete to remove the student based on ID.
Java
@GetMapping("/deleteStudent/{id}")
public String deleteStudent(@PathVariable Long id) {
  studentRepository.deleteById(id); // Delete student by ID using repository
  return "redirect:/studentList";
}
Use code with caution.

9. Views (JSP or Thymeleaf):

Create JSP or Thymeleaf views to display forms, student data lists, and handle user interactions.
Use Spring MVC form tags and data binding mechanisms to populate forms and access submitted data.
Remember:

This is a basic CRUD example. You might need to adapt it based on your specific requirements and data validation needs.
Consider implementing error handling and proper exception management in your controllers.
Leverage Spring Data JPA for efficient and concise data access logic.