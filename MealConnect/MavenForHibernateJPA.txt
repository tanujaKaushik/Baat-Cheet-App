Create a Maven-based J2EE application for Hibernate and JPA. Use the 
same database created in Exercise no. 5 of Session 1

1. Set Up Project Using Spring Initializr

2. Import Project into IDE

3. Configure Database and Hibernate
	Database Configuration: Open application.properties (under src/main/resources) and configure database connection properties:

	spring.datasource.url=jdbc:mysql://localhost:3306/IGNOU?useSSL=false
	spring.datasource.username=root
	spring.datasource.password=password
	spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
	spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
	spring.jpa.hibernate.ddl-auto=update

	
Entity Class: Create an entity class to map to the Student table in your database (assuming Exercise no. 5 defined a Student table):

package com.example.hibernatejpa.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Student {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String name;
    private String email;
    private String phone;

    // Getters and setters
}


4. Create Repository Interface

Create a repository interface using Spring Data JPA to perform CRUD operations:

package com.example.hibernatejpa.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import com.example.hibernatejpa.model.Student;

public interface StudentRepository extends JpaRepository<Student, Long> {
    // Define custom query methods if needed
}

5. Develop and Use Service Layer (Optional)

6. Controller and RESTful API (Optional)

7. Run the Application

8. Test CRUD Operations

